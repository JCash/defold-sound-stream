--local url = "https://onlinetestcase.com/wp-content/uploads/2023/06"
local url = "http://localhost:8000"
--local filename = "100-KB-OGG.ogg"
local filename = "web/100-KB-WAV.wav"

-- ***************************************************************************
local function play_sound(hash)
	go.set("#music", "sound", hash) -- override the resource data on the component
	sound.play("#music") -- start the playing
end


-- ***************************************************************************

local function parse_range(s)
	local _, _, rstart, rend, size = string.find(s, "(%d+)-(%d+)/(%d+)") -- "bytes 0-16383/103277"
	return rstart, rend, size
end

local function http_result(self, _id, response, extra)
	if response.status == 200 or response.status == 206 then
		--pprint(response.headers)
		--pprint(response)
		local relative_path = string.sub(response.url, string.len(url)+1)
		local range = response.headers['content-range'] -- content-range = "bytes 0-16383/103277"
		local rstart, rend, filesize = parse_range(range)
		-- Create the Defold resource, "partial" will enable the streaming mode
		local hash = resource.create_sound_data(relative_path, { data = response.response, filesize = filesize, partial = true })
		-- send "play_sound" to the component
		play_sound(hash)
	end
end

local function load_web_sound(base_url, relative_path)
	local url = base_url .. "/" .. relative_path

	local headers = {}
	headers['Range'] = string.format("bytes=%d-%d", 0, 16384-1)

	http.request(url, "GET", http_result, headers, nil, { ignore_cache = true })
end

-- ***************************************************************************
function init(self)
	url = sys.get_config_string("web.url", url)
	filename = sys.get_config_string("web.filename", filename)
	
	local sound_type = sys.get_config_string("test.sound_type", nil)

	self.initialized = false
	if sound_type == 'Web' then
		-- it's asunchronous, so we have to wait until it's initialized
		liveupdate.add_mount("webmount", url, 100, function ()
			self.initialized = true

			load_web_sound(url, filename)
		end)
	else
		self.initialized = true;
	end
	
end

